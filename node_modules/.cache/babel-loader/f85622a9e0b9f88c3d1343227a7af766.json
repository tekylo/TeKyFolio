{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import _taggedTemplateLiteral from\"/home/teky/src/tekyloFolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _slicedToArray from\"/home/teky/src/tekyloFolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n        {\\n        user(login: \\\"\",\"\\\") {\\n          pinnedItems(first: 6, types: [REPOSITORY]) {\\n            totalCount\\n            edges {\\n              node {\\n                ... on Repository {\\n                  name\\n                  description\\n                  forkCount\\n                  stargazers {\\n                    totalCount\\n                  }\\n                  url\\n                  id\\n                  diskUsage\\n                  primaryLanguage {\\n                    name\\n                    color\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n        \"]);_templateObject=function _templateObject(){return data;};return data;}import React,{useState,useEffect,useContext,Suspense,lazy}from'react';import ApolloClient,{gql}from'apollo-boost';import'./Project.css';import Button from'../../components/button/Button';import{openSource,socialMediaLinks}from'../../portfolio';import StyleContext from'../../contexts/StyleContext';import Loading from'../loading/Loading';export default function Projects(){var GithubRepoCard=/*#__PURE__*/lazy(function(){return import('../../components/githubRepoCard/GithubRepoCard');});var FailedLoading=function FailedLoading(){return null;};var renderLoader=function renderLoader(){return/*#__PURE__*/_jsx(Loading,{});};var _useState=useState([]),_useState2=_slicedToArray(_useState,2),repo=_useState2[0],setrepo=_useState2[1];// todo: remove useContex because is not supported\nvar _useContext=useContext(StyleContext),isDark=_useContext.isDark;useEffect(function(){getRepoData();},[]);function getRepoData(){var client=new ApolloClient({uri:'https://api.github.com/graphql',request:function request(operation){operation.setContext({headers:{authorization:\"Bearer \".concat(openSource.githubConvertedToken)}});}});client.query({query:gql(_templateObject(),openSource.githubUserName)}).then(function(result){setrepoFunction(result.data.user.pinnedItems.edges);// console.log(result);\n}).catch(function(error){console.log(error);setrepoFunction('Error');console.log('Because of this Error, nothing is shown in place of Projects section. Projects section not configured');});}function setrepoFunction(array){setrepo(array);}if(!(typeof repo==='string'||repo instanceof String)&&openSource.display){return/*#__PURE__*/_jsx(Suspense,{fallback:renderLoader(),children:/*#__PURE__*/_jsxs(\"div\",{className:\"main\",id:\"opensource\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"project-title\",children:\"Proyectos C\\xF3digo Abierto\"}),/*#__PURE__*/_jsx(\"div\",{className:\"repo-cards-div-main\",children:repo.map(function(v,i){return/*#__PURE__*/_jsx(GithubRepoCard,{repo:v,isDark:isDark},v.node.id);})}),/*#__PURE__*/_jsx(Button,{text:\"M\\xE1s Proyectos\",className:\"project-button\",href:socialMediaLinks.github,newTab:true})]})});}return/*#__PURE__*/_jsx(FailedLoading,{});}","map":{"version":3,"sources":["/home/teky/src/tekyloFolio/src/containers/projects/Projects.js"],"names":["React","useState","useEffect","useContext","Suspense","lazy","ApolloClient","gql","Button","openSource","socialMediaLinks","StyleContext","Loading","Projects","GithubRepoCard","FailedLoading","renderLoader","repo","setrepo","isDark","getRepoData","client","uri","request","operation","setContext","headers","authorization","githubConvertedToken","query","githubUserName","then","result","setrepoFunction","data","user","pinnedItems","edges","catch","error","console","log","array","String","display","map","v","i","node","id","github"],"mappings":"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","sourcesContent":["import React, {\n  useState, useEffect, useContext, Suspense, lazy,\n} from 'react';\nimport ApolloClient, { gql } from 'apollo-boost';\n\nimport './Project.css';\nimport Button from '../../components/button/Button';\nimport { openSource, socialMediaLinks } from '../../portfolio';\nimport StyleContext from '../../contexts/StyleContext';\nimport Loading from '../loading/Loading';\n\nexport default function Projects() {\n  const GithubRepoCard = lazy(() => import('../../components/githubRepoCard/GithubRepoCard'));\n  const FailedLoading = () => null;\n  const renderLoader = () => <Loading />;\n  const [repo, setrepo] = useState([]);\n  // todo: remove useContex because is not supported\n  const { isDark } = useContext(StyleContext);\n  useEffect(() => {\n    getRepoData();\n  }, []);\n\n  function getRepoData() {\n    const client = new ApolloClient({\n      uri: 'https://api.github.com/graphql',\n      request: (operation) => {\n        operation.setContext({\n          headers: {\n            authorization: `Bearer ${openSource.githubConvertedToken}`,\n          },\n        });\n      },\n    });\n\n    client\n      .query({\n        query: gql`\n        {\n        user(login: \"${openSource.githubUserName}\") {\n          pinnedItems(first: 6, types: [REPOSITORY]) {\n            totalCount\n            edges {\n              node {\n                ... on Repository {\n                  name\n                  description\n                  forkCount\n                  stargazers {\n                    totalCount\n                  }\n                  url\n                  id\n                  diskUsage\n                  primaryLanguage {\n                    name\n                    color\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n        `,\n      })\n      .then((result) => {\n        setrepoFunction(result.data.user.pinnedItems.edges);\n        // console.log(result);\n      })\n      .catch((error) => {\n        console.log(error);\n        setrepoFunction('Error');\n        console.log(\n          'Because of this Error, nothing is shown in place of Projects section. Projects section not configured',\n        );\n      });\n  }\n\n  function setrepoFunction(array) {\n    setrepo(array);\n  }\n  if (!(typeof repo === 'string' || repo instanceof String) && openSource.display) {\n    return (\n      <Suspense fallback={renderLoader()}>\n        <div className=\"main\" id=\"opensource\">\n          <h1 className=\"project-title\">Proyectos Código Abierto</h1>\n          <div className=\"repo-cards-div-main\">\n            {repo.map((v, i) => (\n              <GithubRepoCard repo={v} key={v.node.id} isDark={isDark} />\n            ))}\n          </div>\n          <Button\n            text=\"Más Proyectos\"\n            className=\"project-button\"\n            href={socialMediaLinks.github}\n            newTab\n          />\n        </div>\n      </Suspense>\n    );\n  }\n  return <FailedLoading />;\n}\n"]},"metadata":{},"sourceType":"module"}